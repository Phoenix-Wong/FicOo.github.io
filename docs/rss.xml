<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>FicOo</title><link>https://Phoenix-Wong.github.io/blog</link><description>心有山海，静而不争</description><copyright>FicOo</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://Phoenix-Wong.github.io/blog</link></image><lastBuildDate>Fri, 21 Jun 2024 02:54:30 +0000</lastBuildDate><managingEditor>FicOo</managingEditor><ttl>60</ttl><webMaster>FicOo</webMaster><item><title>k8s deployment.yaml配置文件字段详解</title><link>https://Phoenix-Wong.github.io/blog/post/k8s%20deployment.yaml-pei-zhi-wen-jian-zi-duan-xiang-jie.html</link><description>``` yml&#13;
apiVersion: extensions/v1beta1  # 指定api版本，此值必须在kubectl api-versions中  &#13;
kind: Deployment  # 指定创建资源的角色/类型   &#13;
metadata:  # 资源的元数据/属性 &#13;
  name: demo  # 资源的名字，在同一个namespace中必须唯一&#13;
  namespace: default # 部署在哪个namespace中&#13;
  labels:  # 设定资源的标签&#13;
    app: nginx&#13;
    version: v1&#13;
spec: # 资源规范字段&#13;
  replicas: 1 # 声明副本数目&#13;
  revisionHistoryLimit: 3 # 保留历史版本&#13;
  selector: # 选择器&#13;
    matchLabels: # 匹配标签&#13;
      app: nginx&#13;
      version: v1&#13;
  minReadySeconds: 30 #定义新建的 Pod 经过多少秒后才被视为可用&#13;
  terminationGracePeriodSeconds: 30 #30秒内 (默认 30s) 还未完全停止，就发送 SIGKILL 信号强制杀死进程。</description><guid isPermaLink="true">https://Phoenix-Wong.github.io/blog/post/k8s%20deployment.yaml-pei-zhi-wen-jian-zi-duan-xiang-jie.html</guid><pubDate>Thu, 20 Jun 2024 08:53:32 +0000</pubDate></item><item><title>@EventListener事务未提交</title><link>https://Phoenix-Wong.github.io/blog/post/%40EventListener-shi-wu-wei-ti-jiao.html</link><description>如果并发量比较大 数据库来不及修改 状态未修改 导致后面逻辑没执行&#13;
&#13;
修改方案:改用@TransactionalEventListener 确保事务提交后执行 TransactionPhase.AFTER_COMMIT。</description><guid isPermaLink="true">https://Phoenix-Wong.github.io/blog/post/%40EventListener-shi-wu-wei-ti-jiao.html</guid><pubDate>Thu, 20 Jun 2024 08:52:10 +0000</pubDate></item><item><title>解决强一致性和最终一致性场景</title><link>https://Phoenix-Wong.github.io/blog/post/jie-jue-qiang-yi-zhi-xing-he-zui-zhong-yi-zhi-xing-chang-jing.html</link><description>强一致性&#13;
比如订单创建和取消时对库存和优惠券系统的调用，如果不能保证强一致，可能导致库存超卖或优惠券重复使用。</description><guid isPermaLink="true">https://Phoenix-Wong.github.io/blog/post/jie-jue-qiang-yi-zhi-xing-he-zui-zhong-yi-zhi-xing-chang-jing.html</guid><pubDate>Thu, 20 Jun 2024 08:24:48 +0000</pubDate></item></channel></rss>